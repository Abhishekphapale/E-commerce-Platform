AWSTemplateFormatVersion: '2010-09-09'
Description: AWS E-commerce Platform

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-013168dc3850ef002
      SecurityGroups:
        - Ref: EC2SecurityGroup
      KeyName: ubuntukey

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  S3Bucket:
    Type: AWS::S3::Bucket

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t2.micro
      Engine: mysql
      EngineVersion: '5.7'
      AllocatedStorage: 20
      DBInstanceIdentifier: MyDB
      MasterUsername: admin
      MasterUserPassword: admin123
      StorageType: gp2

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MyDynamoDBTable
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: OrderId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: OrderId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyAPIGateway

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: arn:aws:iam::557115852523:role/Lambda_Execution_role
      Code:
        S3Bucket: myprojectbucket4907
        S3Key: Lambda_function_code.js
      Runtime: nodejs20.x

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyUserPool
      UsernameAttributes:
        - email

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true

  ElasticBeanstalkApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: My Elastic Beanstalk Application

  ElasticBeanstalkEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      EnvironmentName: MyEnvironment
      SolutionStackName: "64bit Amazon Linux 2 v4.2.0 running Node.js"
      OptionSettings:
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: EC2KeyName
          Value: ubuntukey

  SESConfigurationSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: MySESConfigurationSet

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: MySQSQueue

  CloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "High CPU utilization"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "90"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"

  Route53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z045921917NW4N33CCSBY
      Name: awsproject.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
